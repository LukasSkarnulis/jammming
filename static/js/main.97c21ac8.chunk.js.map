{"version":3,"sources":["Components/util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","console","log","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97c21ac8.chunk.js","sourcesContent":["const clientId = \"0be72f2e021a45348f8c31a1c4c27926\";\r\nconst redirectUri = \"http://localhost:3000/\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\r\n            window.history.pushState(\"Access Token\", null, \"/\");\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n    async search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }}).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n      },\r\n      savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch(\"https://api.spotify.com/v1/me\", {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({name: name})\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \r\n                {\r\n                    headers: headers,\r\n                    method: \"POST\",\r\n                    body: JSON.stringify({ uris: trackUris}) \r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: \"\"\r\n        }\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    search() {\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n            <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n            <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchBar;","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n            <h3>{this.props.track.name}</h3>\r\n            <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n            </div>\r\n            {this.renderAction()}\r\n</div>\r\n        )\r\n    }\r\n}\r\nexport default Track;","import React from \"react\";\r\nimport \"./Tracklist.css\";\r\nimport Track from \"../Track/Track\";\r\n\r\nclass Tracklist extends React.Component {\r\n    render() {\r\n        return (\r\n            console.log(\"something\"),\r\n            <div className=\"TrackList\">\r\n            {this.props.tracks.map(track => {\r\n                return <Track track={track} key={track.id} onAdd={this.props.onAdd} \r\n                onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />\r\n            })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Tracklist;","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\nimport Tracklist from \"../Tracklist/Tracklist\";\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <Tracklist tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchResults;","import React from \"react\";\r\nimport \"./Playlist.css\";\r\nimport Tracklist from \"../Tracklist/Tracklist\";\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n            <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n            {<Tracklist tracks={this.props.playlistTracks} onRemove={this.props.onRemove} \r\n            isRemoval={true}/>}\r\n             <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n</div>\r\n        )\r\n    }\r\n}\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({playlistTracks: tracks})\n    }\n  }\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playlistTracks: tracks})\n  }\n  updatePlaylistName(name) {\n    this.setState({playlistName: name})\n  }\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n      })\n    })\n  }\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n  render() {\n  return (\n    <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n    <SearchBar onSearch={this.search}/>\n    <div className=\"App-playlist\">\n       <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>  \n       <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} \n       onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n    </div>\n  </div>\n</div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}